name = "@R_PACKAGE_NAME@"
code_files = "@R_PACKAGE_R_FOLDER@/@R_PACKAGE_NAME@.R"
dir = "@R_PACKAGE_DESTINATION_FOLDER@"


# Code extracted from package.skeleton function

#####################################################################
message("Creating NAMESPACE ...", domain = NA)

environment <- new.env(hash = TRUE, parent = globalenv())
methods::setPackageName(name, environment)
for (cf in code_files) sys.source(cf, envir = environment)

classesList <- methods::getClasses(environment)
#classes0 <- .fixPackageFileNames(classesList)
#names(classes0) <- classesList
methodsList <- methods::getGenerics(environment)
#methods0 <- .fixPackageFileNames(methodsList)
#names(methods0) <- methodsList

list <- ls(environment, all.names = TRUE)
if (identical(environment, .GlobalEnv)) 
    list <- list[list != ".Random.seed"]

out <- file(file.path(dir, "NAMESPACE"), "wt")
list0 <- list[grepl("^[[:alpha:]]", list)]
if (length(list0)) 
    writeLines(strwrap(sprintf("export(%s)", paste0("\"", 
        list0, "\"", collapse = ", ")), exdent = 7L), out)
if (length(methodsList)) {
    cat("exportMethods(\n    ", file = out)
    cat(paste0("\"", methodsList, "\"", collapse = ",\n    "), 
        "\n)\n", file = out)
}
if (length(classesList)) {
    cat("exportClasses(\n    ", file = out)
    cat(paste0("\"", classesList, "\"", collapse = ",\n     "), 
        "\n)\n", file = out)
}

#####################################################################

# Append useDynLib

cat("useDynLib(@R_PACKAGE_NAME@)\n", file = out)
